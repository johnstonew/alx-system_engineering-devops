When we type “https://www.google.com" in our web browser and hit Enter, it initiates a series of behind-the-scenes processes that seamlessly deliver the desired webpage to our screen. In this blog post, we will dive into the steps involved in this journey, covering DNS requests, TCP/IP, firewalls, HTTPS/SSL, load-balancers, web servers, application servers, and databases.

DNS Request: The first step on this expedition is the Domain Name System (DNS) request. The browser extracts the domain name, “www.google.com," and sends a DNS query to a DNS resolver. The resolver then resolves the domain name into an IP address, such as 216.58.201.68, using DNS servers. These servers map domain names to their respective IP addresses, allowing browsers to connect to the correct server.
TCP/IP: Now since we have the IP address, the browser proceeds to establish a Transmission Control Protocol (TCP) connection with the destination server. TCP breaks down the data into packets, ensuring reliable and ordered delivery. It sets up a handshake between the browser and the server, ensuring both parties are ready to communicate.
Firewall: At this stage, the connection must pass through a firewall, a security measure that monitors and controls incoming and outgoing network traffic. The firewall evaluates the connection request, verifying its authenticity and ensuring it meets the specified security policies. If approved, the connection proceeds to the next step.
HTTPS/SSL: To safeguard the confidentiality and integrity of data transmitted between the browser and the server, the connection utilizes the Hypertext Transfer Protocol Secure (HTTPS) protocol. This is achieved through the implementation of Secure Sockets Layer (SSL) or Transport Layer Security (TLS) encryption. SSL/TLS certificates verify the server’s identity, encrypt data, and establish a secure channel for communication. This ensures that sensitive data cannot be intercepted by a third party when moving between the server and client.
Load-Balancer: In cases where websites experience high traffic, load-balancers step in to distribute the incoming requests across multiple servers. Load-balancers ensure optimal resource utilization and prevent overload by routing traffic to servers that have less work. This helps maintain the website’s performance and availability.
Web Server: Once the connection passes through the load-balancer, it reaches a web server. The web server’s primary role is to process the incoming request and deliver the requested web page. It retrieves the requested resources, such as HTML, CSS, and JavaScript files, and send it back to the browser.
Application Server: In more complex web applications, an application server may come into play. The application server hosts the business logic and processes dynamic requests. It interacts with databases, external APIs, and other systems, generating the necessary data for the web server to render the final response.
Database: When data retrieval or storage is required, the application server interacts with a database management system (DBMS). The DBMS manages the storage and retrieval of data, ensuring its integrity and security. For example large applications like facebook stores alot of data, this is kept in a database where it can be retrieved and manipulated easily.
